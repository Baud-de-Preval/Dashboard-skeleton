library(shiny)
library(shinydashboard)
library(knitr)
library(tidyverse)
library(readxl)
library(reshape2)
library(plyr)
library(janitor)
library(shinythemes)

# Initialisation

read_and_parse = function(psmfile){
  data = readxl::read_xlsx(psmfile,skip =10)
  data = data %>% unite(col="description",22:24,na.rm=T,sep= " [",remove = T) 
  data = data %>% separate(col = "Origine_Query",sep = "@",into = c("sample","query"))
  data = data %>% select(sample,`Mascot Peptide Score`,Accession, description)
  samplelist = data %>% select(sample) %>% unique %>% as.vector()

  return(data)
}




ui <- dashboardPage(skin = "green", 
  dashboardHeader(title = "Proteomic app"), dbHeader$children[[2]]$children <-  tags$a(href='https://umr-astre.cirad.fr/l-unite',
                                                                                       tags$img(src='https://umr-astre.cirad.fr/var/umr_astre/storage/images/umr-astre/l-unite/37434-38-fre-FR/l-unite.png',height='60',width='200')),
  dashboardSidebar(sidebarMenu(
    menuItem("Data uploader", tabName = "data_upload", icon = icon("file")),
    menuItem("Raw data", tabName = "raw_data", icon = icon("area-chart")),
    menuItem("Grouped data", tabName = "grouped_data", icon = icon("bar-chart"), sliderInput("MPS", "MPS lower threshold :", 0,250,20),
             menuSubItem("By sample", tabName = "by_sample", icon = icon("list-alt")),
             menuSubItem("Khi test", tabName = "khi_2", icon = icon("a fa-pencil"))
    ),
    menuItem("Source code", tabName = "source_code", icon = icon("code"))
    # tags$img(class = "Image", src ="https://p4.wallpaperbetter.com/wallpaper/670/178/355/dna-spiral-genetics-twisted-wallpaper-preview.jpg")
  )),
  
  dashboardBody(
    tabItems(
      tabItem(tabName = "data_upload",
        fluidRow(
          box(status = "success",width = '100%', fileInput(inputId = "filedata",
                                            label = "Upload peptide file. Choose xlsx file",
                                            accept = c(".xlsx")),
              tags$hr(),
              actionButton("parse", "Parse dataset for analysis"), align = "center"
          ),
          box(status = "success", width = '100%', dataTableOutput("contents"), title = "Data overview", solidHeader = T)
          
              )
            ),
    tabItem(tabName = "raw_data",
            fluidRow(
              box(status = "success", title = "Summary of the data", solidHeader = T, tableOutput("summary")),
              box(status = "success", title = "Sample figures", tableOutput("figures"))
            )
          ),
    tabItem(tabName = "by_sample",
            fluidRow(
              box(status = "success", title = "Overview by sample", solidHeader = T, plotOutput("plot")),
              box(status = "success", title = "Sample displayed", uiOutput("moreControls"))
            )
        ),
    tabItem(tabName = "khi_2",
            fluidRow(
              box(status = "success", title = "Khi-2 test overview", solidHeader = T, plotOutput("heat")),
              box(status = "success", title = "Khi-2 test between two samples", 
                  selectInput(inputId = "box1", "Choose a sample", choices = NULL),
                  selectInput(inputId = "box2", "Choose another", choices = NULL), textOutput("Khi"))
            )
        ),
    tabItem(tabName = "source_code",
            fluidRow(
              box(status = "success", title = "Get a report", solidHeader = T, downloadButton("report","Report"), align="center"),
              box(status = "success", title = "Get the code", solidHeader = T, uiOutput("code"), align="center")
           )
        )
    )
  )
)
  
options(shiny.maxRequestSize=30*1024^2)
server <- function(input, output, session) {

  dataparsed= reactiveVal(data.frame())
  samplelist = reactiveVal(c())
  sampleshown = reactiveVal("")
  Prot = reactiveVal(data.frame())
  Heat = reactiveVal(data.frame())
  

  observeEvent(input$parse, {
    dataparsed(read_and_parse(req(input$filedata$datapath)))
    samplelist(dataparsed()$sample %>% unique)
    sampleshown(samplelist()[1])
    output$contents = renderDataTable(dataparsed())
   })  
  
  output$summary = renderTable(  
    summary(dataparsed()[,2])

  )
  
  output$figures = renderTable(
    dataparsed() %>% tabyl(sample)
  )
  
  
  output$plot = renderPlot(
     ggplot(dataparsed() %>% filter(sample == input$sampleID & `Mascot Peptide Score` >= input$MPS)) + 
       geom_histogram(aes(x=`Mascot Peptide Score`, fill = input$sampleID)) +
       guides(fill=FALSE) 
    )
    
    output$moreControls = renderUI({
      tagList(
        radioButtons("sampleID","Choose sample:",samplelist())
      )
  })
    
    observe({
      updateSelectInput(session, "box1",
                        label = "Choose a sample",
                        choices = samplelist(),
                        selected = NULL)
      
      updateSelectInput(session, "box2",
                        label = "Choose another sample",
                        choices = samplelist(),
                        selected = NULL)
    })
    
    output$Khi = renderText({
      dataparsed() %>% filter(`Mascot Peptide Score` >= input$MPS)
      Prot() %>% tabyl(dataparsed(), sample, Accession)
      Prot() %>% select(Accession, input$box1, input$box2)
      chisq.test(x = Prot, y = NULL, tabyl_results = TRUE)
    })
    

    
    url <- a("here", href="https://github.com/Baud-de-Preval/Dashboard-skeleton/blob/master/Prototypr_01")
    output$code <- renderUI({
      tagList("To get the code please click :", url)
    })
}

shinyApp(ui, server)
