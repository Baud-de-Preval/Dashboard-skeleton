library(shiny)
library(shinydashboard)
library(knitr)
library(tidyverse)
library(readxl)
library(reshape2)
library(plyr)
library(janitor)



# Initialisation

PbS = c()

read_and_parse = function(psmfile){
  data = readxl::read_xlsx(psmfile,skip =10)
  data = data %>% unite(col="description",22:24,na.rm=T,sep= " [",remove = T) 
  data = data %>% separate(col = "Origine_Query",sep = "@",into = c("sample","query"))
  data = data %>% select(sample,`Mascot Peptide Score`,Accession, description)
  samplelist = data %>% select(sample) %>% unique %>% as.vector()
  
  return(data)
}


ui <- dashboardPage(
  skin = "green", 
  dashboardHeader(title = "Proteomic app"),
  dashboardSidebar(sidebarMenu(
    menuItem("Data uploader", tabName = "data_upload", icon = icon("file")),
    menuItem("Raw data", tabName = "raw_data", icon = icon("area-chart")),
    menuItem("Grouped data", tabName = "grouped_data", icon = icon("bar-chart"), sliderInput("MPS", "MPS lower threshold :", 0,150,20),
             menuSubItem("By sample", tabName = "by_sample", icon = icon("list-alt"))
    ),
    menuItem("Source code", tabName = "source_code", icon = icon("code"))
    # tags$img(class = "Image", src ="https://p4.wallpaperbetter.com/wallpaper/670/178/355/dna-spiral-genetics-twisted-wallpaper-preview.jpg")
  )),
  
  dashboardBody(
    tabItems(
      tabItem(tabName = "data_upload",
        fluidRow(
          box(status = "success", fileInput(inputId = "filedata",
                                            label = "Upload peptide file. Choose xlsx file",
                                            accept = c(".xlsx")),
              tags$hr(),
              actionButton("parse", "Parse dataset for analysis"), align = "center"
          ),
          box(status = "success", dataTableOutput("contents"), title = "Data overview", solidHeader = T)
          
              )
            ),
    tabItem(tabName = "raw_data",
            fluidRow(
              box(status = "success", title = "Summary of the data", solidHeader = T, plotOutput("summary"))
            )
          ),
    tabItem(tabName = "by_sample",
            fluidRow(
              box(status = "success", title = "Overview by sample", solidHeader = T, plotOutput("plot")),
              box(status = "success", title = "Sample displayed", uiOutput("moreControls"))
            )
        ),
    tabItem(tabName = "source_code",
            fluidRow(
              box(status = "success", title = "Get a report", solidHeader = T, downloadButton("report","Report"), align="center"),
              box(status = "success", title = "Get the code", solidHeader = T, uiOutput("code"), align="center")
           )
        )
    )
  )
)
  
options(shiny.maxRequestSize=30*1024^2)
server <- function(input, output, session) {

  dataparsed= reactiveVal(data.frame())
  samplelist = reactiveVal(c())
  sampleshown = reactiveVal("")
  As = reactiveValues()
  

  observeEvent(input$parse, {
    dataparsed(read_and_parse(req(input$filedata$datapath)))
    samplelist(dataparsed()$sample %>% unique)
    sampleshown(samplelist()[1])
    output$contents = renderDataTable(dataparsed())
    As <-tabyl(dataparsed(), Accession, sample)
   })  
  
  output$summary = renderPlot(  
    As %>% ggplot(aes(x = sample) +
      geom_bar(position="dodge", stat="identity") +
      theme(axis.text.x = element_text(face="bold", color="black", angle = 32)) +
      ggtitle("Protein distribution between samples") +
      xlab("Sample") +
      ylab("Number of protein") +
      theme_bw()
  ))

  output$plot = renderPlot(
     ggplot(dataparsed() %>% filter(sample == input$sampleID & `Mascot Peptide Score` >= input$MPS)) + 
       geom_histogram(aes(x=`Mascot Peptide Score`, fill = input$sampleID)) +
       guides(fill=FALSE) 
    )
    
    output$moreControls = renderUI({
      tagList(
        radioButtons("sampleID","Choose sample:",samplelist())
      )
  })
    
    url <- a("here", href="https://github.com/Baud-de-Preval/Dashboard-skeleton/blob/master/Prototypr_01")
    output$code <- renderUI({
      tagList("To get the code please click :", url)
    })
}

shinyApp(ui, server)
