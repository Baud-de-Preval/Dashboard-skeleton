library(shiny)
library(shinydashboard)
library(knitr)
library(tidyverse)
library(readxl)
library(reshape2)
library(plyr)
library(janitor)

# Initialisation

PbS = c()

ui <- dashboardPage(
  skin = "green", 
  dashboardHeader(title = "Lumpy skin disease data analysis", titleWidth = 300),
  dashboardSidebar(sidebarMenu(
    menuItem("Data uploader", tabName = "data_upload", icon = icon("file")),
    menuItem("Raw data", tabName = "raw_data", icon = icon("area-chart")),
    menuItem("Grouped data", tabName = "grouped_data", icon = icon("bar-chart"), sliderInput("MPS", "MPS lower threshold :", 0,150,60),
             menuSubItem("By sample", tabName = "by_sample", icon = icon("list-alt"))
    ),
    menuItem("Source code", tabName = "source_code", icon = icon("code"))
    # tags$img(class = "Image", src ="https://p4.wallpaperbetter.com/wallpaper/670/178/355/dna-spiral-genetics-twisted-wallpaper-preview.jpg")
  )),
  
  dashboardBody(
    tabItems(
      tabItem(tabName = "data_upload",
        fluidRow(
          box(status = "success", fileInput("file", "Choose CSV or Excel File",
                                             multiple = FALSE, 
                                             accept = c("text/csv",
                                                        "text/comma-separated-values,text/plain",
                                                        ".csv",".xlsx")),
               tags$hr(),
               checkboxInput("header", "Header", TRUE),
               radioButtons("sep", "Separator",
                            choices = c(Comma = ",",
                                        Semicolon = ";",
                                        Tab = "\t"),
                            selected = ","),
               radioButtons("quote", "Quote",
                            choices = c(None = "",
                                        "Double Quote" = '"',
                                        "Single Quote" = "'"),
                            selected = '"'),
               tags$hr(),
               radioButtons("disp", "Display",
                            choices = c(Head = "head",
                                        All = "all"),
                            selected = "head")
          ),
          box(status = "success", tableOutput("contents"), title = "Data overview", solidHeader = T)
          
              )
            ),
    tabItem(tabName = "raw_data",
            fluidRow(
              box(status = "success", title = "Summary of the data", solidHeader = T, plotOutput("summary"))
            )
          ),
    tabItem(tabName = "by_sample",
            fluidRow(
              box(status = "success", title = "Overview by sample", solidHeader = T, plotOutput("hist")),
              box(status = "success", title = "Sample displayed",
                  checkboxInput("all", "All", T),
                  tags$hr(),
                   # checkboxInput() # Introduire chaque échantillon
              )
            )
        ),
    tabItem(tabName = "source_code",
            fluidRow(
              box(status = "success", title = "Get a report", solidHeader = T, downloadButton("report","Report"), align="center"),
              box(status = "success", title = "Get the code", solidHeader = T, uiOutput("code"), align="center")
           )
        )
    )
  )
)
  

server <- function(input, output, session) {
  
  output$contents <- renderTable({

    req(input$file)

    tryCatch(
      {
        df <- read.csv(input$file$datapath,
                       header = input$header,
                       sep = input$sep,
                       quote = input$quote)
      },
      error = function(e) {
        # return a safeError if a parsing error occurs
        stop(safeError(e))
      }
    )
    
    if(input$disp == "head") {
      return(head(df))
    }
    else {
      return(df)
    }
    
  })
  
  tab <-reactive({req(data.frame(input$file))
  pep <- tab()
  # Traitement du tableau d'entrée 1.0 ( placement ???)
  
  pep %>% separate(Origine_Query,into=c("sample","query"),sep="6") -> pep
  N = length(table(pep$sample))   # Nombre échantillon
  Name = unique(pep$sample)       # Nom des échantillons
  pep %>% group_by("Accession") %>% unique %>% top_n(1, 'Mascot Peptide Score') -> Mascot   # MPS par protéine unique
  pep <- pep %>% pivot_wider(names_from = sample, values_from = Accession)
  for (l in Name){
    PbS <- append(PbS, length(table(factor(pep$sample == "l"))))  # Liste du nb de protéine unique par sample
  }
  MPS <- apply(X = Mascot, MARGIN = 'Mascot Peptide Score', FUN = sum())
  
  output$summary <- renderPlot({
    data.frame(pep) %>% ggplot(mapping = aes(y= PbS, x= Name, color = MPS)) +
      geom_bar(fill = "steelblue", stat = "identity") +
      labs(color="Mascot score") +
      scale_color_gradient(low="blue", high="red") +
      geom_text(aes(label=N), position=position_dodge(width=0.9), vjust=-0.25) +
      theme(axis.text.x = element_text(face="bold", color="black",angle = 32)) +
      ggtitle("Number of protein in each sample") + 
      xlab("Sample") + 
      ylab("Cumulated number of protein") 
  })
  
  # Traitement du tableau d'entrée 2.0
  
  Nb_pep<-matrix(rep(0,5*N), ncol=N, nrow=5, byrow=FALSE) # Création d'une matrice vide
  colnames(Nb_pep) = Name
  legend = c("1 peptide", "2 to 5 peptides", "5 to 20 peptides", " 20 to 50 peptides","more than 50 peptides")
 
  i=0
  for (l in 1:N){
    i=i+1
    pep_bis <- subset(pep, sample == Name[l])
    nb = as.numeric(table(pep_bis$Accession))
    Nb_pep[1,i] <- sum(nb==1)
    Nb_pep[2,i] <- sum(nb>1 & nb<= 5)
    Nb_pep[3,i] <- sum(nb>5 & nb<=20)
    Nb_pep[4,i] <- sum(nb>20 & nb<=50)
    Nb_pep[5,i] <- sum(nb>50)
  }
  
  output$by_sample <- renderPlot({
    ggplot(data = data.frame(Nb_pep), mapping = aes(y= unlist(Nb_pep[,2]), x= rep(legend, N), levels = rep(Name, 5)), fill = sample) +
      geom_bar(stat = "identity") +
      theme(axis.text.x = element_text(face="bold", color="black", size = 6)) +
      geom_text(aes(label=Number), position=position_dodge(width=0.9), vjust=-0.25, size = 2.5) + 
      ggtitle("Number of peptide composing proteins") + 
      ylab("Protein composition")+ 
      theme(legend.position="none") +
      xlab("")+
      facet_wrap(~ sample, scales = "free_x") +
      aes(fill = as.factor(sample)) 
  })
})

  url <- a("here", href="https://github.com/Baud-de-Preval/Dashboard-skeleton/blob/master/Prototypr_01")
  output$code <- renderUI({
    tagList("To get the code please click :", url)
  })
  
}

shinyApp(ui, server)
