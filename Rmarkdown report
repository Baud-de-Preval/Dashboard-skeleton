---
title: "Proteomic App Report"
output: html_document
runtime : shiny
---

```{r include=FALSE}
source("~/work/Github/Dashboard-skeleton/Prototype_1.R")
```

This report will provide a save of your graphical results and data as well as allowing to share your work.

## Samples intersection
 
```{r include = FALSE}
library(UpSetR)
require(grid)
require(ggrepel)
```

This first plot offers a global point of view on the protein overlapping between organisms.

```{r echo = FALSE}
awesomeRadio("organismID","Choose species:",organism())
renderPlot({
    make_upset(finaldata(), samplelist(), input$organismID) })
```

You can also have a focus on some specific samples of your choices :
```{r echo = FALSE}

```

## Interactive heatmap

A dynamic heatmap enable the clustering of the samples. It reveals how close protein are between samples and then establish links to produce a dendrogram.

```{r echo = FALSE}
library(tidyverse)
library(hrbrthemes)
library(viridis)
library(plotly)
library(d3heatmap)
library(heatmaply)

awesomeRadio("organismID_2","Choose species:",organism())
renderPlot({
    make_heatmap(finaldata(), samplelist(), input$organismID_2)})
```

## Scaling plots

This section displays spatial arrangement of the samples based on two  models. Is confirms the gathering of samples previously pointed out by mathematical projections.
First, you will find a non metric multidimensional scaling which tries to minimize the inter-distance between samples and keeps the best best of the 20 attempted projections. A slider is available so you can exclude low deep lectured proteins. The following stress plot tells how good the projections is :

```{r echo = FALSE}
library(vegan)
library(MASS)
library(ggpubr)

noUiSliderInput("score", "Filter by a minimum value of reading (SC sums in a column)", 15, 5000, 100)
renderPlot({
    make_nMDS(finaldata(), input$organismID_3, input$score)})
```

Then the proper plot makes possible samples clustering.

```{r echo = FALSE}

awesomeRadio("organismID_3","Choose species:",organism())
renderPlot({
    make_nMDSbis(finaldata(), input$organismID_3, input$score)})
```

The next representation attempt to explain as much as possible the samples in relation to the axis. Only the best two dimensions are kept so that the 2D representation is as close as possible to the n-dimensions representation. The following bar plot shows how much dimensions explain the variance.

```{r echo = FALSE}
library(FactoMineR)
library(factoextra)

renderPlot({
    make_pca_1(finaldata())})
```

And here is the graph showing the individuals in relations with the axis. The circle representing sample axis has been added below for more clarity.
```{r echo=FALSE}
renderPlot({
    make_pca_3(finaldata())})
renderPlot({
    make_pca_2(finaldata())})
```

